# Copyright(C) 2019 - 2020 Håkan Sidenvall <ekcoh.git@gmail.com>.
#
# This file is subject to the license terms in the LICENSE file found in the 
# root directory of this distribution.
#
# See https://github.com/ekcoh/gb2gc for updates, documentation, and revision 
# history.

# gb2gc_add_benchmark
#
# Adds benchmark run target to an existing executable CMake target built on
# Google Benchmark and optionally supports generating a chart representing
# the benchmark displayed via Google Chart HTML:
#
# gb2gc_add_benchmark(
#   TARGET target
#   BM_OUT output  
#   [HTML_OUTPUT html_output]
#   [OPTIONS option1 [options2] ...]
#   [GB2GC_OPTIONS option1 [option2] ...]
#   [WORKING_DIRECTORY dir]
# )
#
# The given 'target' specifies a valid executable CMake target built on 
# Google Benchmark and this function setup a custom target for running that
# benchmark with the given options.
#
# The options are:
#
# BM_OUT
# BM_OUT_FORMAT
# BM_FORMAT
# BM_COUNTERS_TABULAR
# BM_COLOR
# BM_REPORT_AGGREGATES_ONLY
#
# HTML_OUTPUT 
#   Specifies the HTML output file to be generated with a chart representation
#   of the benchmark result. If the output path is a relative path it will be 
#   interpreted as relative to the working directory which defaults to the 
#   build tree current binary directory.  
#
# OPTIONS
#   Allows to override 
#   See: https://github.com/google/benchmark#command-line
#
# OUTPUT
#   Specifies the JSON output file to be generated by the benchmark executable.
#   If the output path is a relative path it will be interpreted as relative
#   to the working directory which defaults to the build tree current binary 
#   directory. 
#
# TARGET
#   Specifies an existing CMake target representing a Google Benchmark 
#   executable.
#
# WORKING_DIRECTORY
#   Specifies another working directory than the current binary directory. 
#   All relative paths specified as arguments to this function will be 
#   interpreted as relative to this directory if specified.
#
#
function(gb2gc_add_benchmark)
   cmake_parse_arguments(
        GB2GC
        "BM_COUNTERS_TABULAR;BM_REPORT_AGGREGATES_ONLY"
        "TARGET;BM_COLOR;BM_FORMAT;BM_OUT;BM_OUT_FORMAT;HTML_OUTPUT;WORKING_DIRECTORY;TITLE;WIDTH;HEIGHT"
        "ARGS"
        ${ARGN}
    )

    ###########################################################################
    # Assert general options
    if (NOT GB2GC_TARGET)
        message(FATAL_ERROR "ERROR: Missing required option 'TARGET'")
    endif()
    if (NOT GB2GC_WORKING_DIRECTORY)
      set(GB2GC_WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
    endif()

    message(status ": GB2GC_TARGET=${GB2GC_TARGET}") # Verbose
    message(status ": GB2GC_WORKING_DIRECTORY=${GB2GC_WORKING_DIRECTORY}") # Verbose

    ###########################################################################
    # Assert benchmark (BM prefixed) options
    if (NOT GB2GC_BM_OUT) # Required
        message(FATAL_ERROR "ERROR: Missing required option 'BM_OUT'")
    endif()
    list(APPEND GB2GC_BM_ARGS "--benchmark_out=${GB2GC_BM_OUT}")

    if (NOT GB2GC_BM_OUT_FORMAT)
        list(APPEND GB2GC_BM_ARGS "--benchmark_out_format=json")
    endif()

    if (GB2GC_BM_FORMAT)
        list(APPEND GB2GC_BM_ARGS "--benchmark_format=${GB2GC_BM_FORMAT}")
    endif()

    if (GB2GC_BM_COUNTERS_TABULAR)
        list(APPEND GB2GC_BM_ARGS "--benchmark_counters_tabular=true")
    endif()

    if (GB2GC_BM_COLOR)
        list(APPEND GB2GC_BM_ARGS "--benchmark_color=${BM_COLOR}")
    endif()

    if (GB2GC_BM_REPORT_AGGREGATES_ONLY)
        list(APPEND GB2GC_BM_ARGS "--benchmark_report_aggregates_only=true")
    endif()

    message(status ": GB2GC_BM_ARGS=${GB2GC_BM_ARGS}") # Verbose

    ###########################################################################
    # Assert HTML/chart (CHART prefixed) options

    if (NOT GB2GC_HTML_OUTPUT)
        # Default to same filename as BM_OUT but .html extension
        get_filename_component(GB2GC_HTML_OUTPUT_NAME_WE 
             ${GB2GC_BM_OUT} NAME_WE)
        set(GB2GC_HTML_OUTPUT "${GB2GC_HTML_OUTPUT_NAME_WE}.html")
    endif()

    if (NOT GB2GC_ARGS)
      list(APPEND GB2GC_ARGS "-c" "bar")
      list(APPEND GB2GC_ARGS "-i" "${GB2GC_BM_OUT}")
      list(APPEND GB2GC_ARGS "-o" "${GB2GC_HTML_OUTPUT}")
    endif()

    if (GB2GC_TITLE)
        list(APPEND GB2GC_ARGS "-t" "${GB2GC_TITLE}")
    endif()

    if (GB2GC_WIDTH)
        list(APPEND GB2GC_ARGS "-w" "${GB2GC_WIDTH}")
    endif()
    if (GB2GC_HEIGHT)
        list(APPEND GB2GC_ARGS "-h" "${GB2GC_HEIGHT}")
    endif()

    message(status ": GB2GC_ARGS=${GB2GC_ARGS}") # Verbose

    ###########################################################################
    # Custom commands

    # Add a custom command to generate benchmark output file
    add_custom_command(
        OUTPUT ${GB2GC_BM_OUT}
        COMMAND $<TARGET_FILE:${BENCHMARK_TARGET}> ${GB2GC_BM_ARGS}
        DEPENDS ${GB2GC_TARGET}
        WORKING_DIRECTORY ${GB2GC_WORKING_DIRECTORY}
        VERBATIM
    )

    # Add a custom command to generate HTML chart from benchmark output file
    add_custom_command(
	    OUTPUT ${GB2GC_HTML_OUTPUT}
	    COMMAND $<TARGET_FILE:${PROJECT_NAME}> ${GB2GC_ARGS}
	    DEPENDS 
		    ${PROJECT_NAME} 
		    ${GB2GC_BM_OUT}
	    WORKING_DIRECTORY ${GB2GC_WORKING_DIRECTORY}
	    VERBATIM
    )

    ###########################################################################
    # Custom targets

    # Add target to run benchmark
    add_custom_target(${BENCHMARK_TARGET}_run
        COMMENT "Running benchmark ${BENCHMARK_TARGET}..."
	    COMMAND ${CMAKE_COMMAND} -E echo "Running benchmark ${BENCHMARK_TARGET}..."
	    DEPENDS ${GB2GC_BM_OUT}
	    VERBATIM
    )

    # Add target to generate chart
    add_custom_target(${BENCHMARK_TARGET}_chart
        COMMENT "Generating chart ${GB2GC_HTML_OUTPUT}..."
	    COMMAND ${CMAKE_COMMAND} -E echo "Generating chart..."
	    DEPENDS ${GB2GC_HTML_OUTPUT} 
	    VERBATIM
    )

endfunction()